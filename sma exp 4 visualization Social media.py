# -*- coding: utf-8 -*-
"""Expt4sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g3MOJJ5izpCcH542lgyc0D0nKQAa2Kl-
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('/content/expt4 dataset sales.csv')

# Display the first few rows of the dataset
print(data.head())

# Summary statistics
print(data.describe())

shape = data.shape

# Print the shape
print("Number of rows:", shape[0])
print("Number of columns:", shape[1])

# Check for missing values
print(data.isnull().sum())

# For example, you may fill missing values based on related information
data['STATE'].fillna('Unknown', inplace=True)
data['TERRITORY'].fillna('Unknown', inplace=True)

# Check for missing values
print(data.isnull().sum())

# Fill missing postal codes with 'Unknown'
data['POSTALCODE'].fillna('Unknown', inplace=True)

# Check for missing values
print(data.isnull().sum())

# Drop columns with null values
data = data.dropna(axis=1)

# Display the updated DataFrame
print(data.head())

# Check for missing values
print(data.isnull().sum())

shape = data.shape

# Print the shape
print("Number of rows:", shape[0])
print("Number of columns:", shape[1])

#Basic information

data.info()

#Describe the data
data.describe()

#Find the duplicates

data.duplicated().sum()

import matplotlib.pyplot as plt

# Plot unique value counts for each column
for column in data.columns:
    unique_values = data[column].value_counts()
    plt.figure(figsize=(14, 8))
    unique_values.plot(kind='bar')
    plt.title(f'Unique Values Count for {column}')
    plt.xlabel('Unique Values')
    plt.ylabel('Count')
    plt.xticks(rotation=45)
    plt.show()

import matplotlib.pyplot as plt

# Columns to exclude from unique value count plots
columns_to_exclude = ['CONTACTFIRSTNAME', 'CONTACTLASTNAME', 'POSTALCODE', 'CITY', 'ADDRESSLINE1',
                      'PHONE', 'CUSTOMERNAME', 'PRODUCTCODE', 'MSRP', 'ORDERDATE', 'SALES',
                      'PRICEEACH', 'QUANTITYORDERED', 'ORDERNUMBER']

# Plot unique value counts for each remaining column
for column in data.columns:
    if column not in columns_to_exclude:
        unique_values = data[column].value_counts()
        plt.figure(figsize=(8, 6))
        unique_values.plot(kind='bar')
        plt.title(f'Unique Values Count for {column}')
        plt.xlabel('Unique Values')
        plt.ylabel('Count')
        plt.xticks(rotation=45)
        plt.show()

# Correlation

#data.corr()

import matplotlib.pyplot as plt

# Histogram of order quantities
plt.hist(data['QUANTITYORDERED'], bins=20)
plt.xlabel('Order Quantity')
plt.ylabel('Frequency')
plt.title('Histogram of Order Quantities')
plt.show()

# Box plot of sales
plt.boxplot(data['SALES'])
plt.xlabel('Sales')
plt.title('Box Plot of Sales')
plt.show()

# Scatter plot of sales vs. quantity ordered
plt.scatter(data['QUANTITYORDERED'], data['SALES'])
plt.xlabel('Quantity Ordered')
plt.ylabel('Sales')
plt.title('Scatter Plot of Sales vs. Quantity Ordered')
plt.show()
import numpy as np
# Correlation matrix
#correlation_matrix = data.corr()
#print(correlation_matrix)

numeric_data = data.select_dtypes(include=np.number)

# Calculate correlation matrix
correlation_matrix = numeric_data.corr()

# Print correlation matrix
print(correlation_matrix)

import seaborn as sns

# Pair plot
sns.pairplot(data)
plt.title('Pair Plot of Variables')
plt.show()

# Histograms for numerical columns
data.hist(figsize=(10, 8))
plt.suptitle('Histograms')
plt.show()

# Box plots for numerical columns
plt.figure(figsize=(10, 6))
sns.boxplot(data=data)
plt.title('Box plots')
plt.xticks(rotation=45)
plt.show()

# Heatmap of correlations
sns.heatmap(correlation_matrix, annot=True)
plt.title('Heatmap of Correlations')
plt.show()

# Bar plot of total sales by product line
sales_by_product_line = data.groupby('PRODUCTLINE')['SALES'].sum().sort_values(ascending=False)
sales_by_product_line.plot(kind='bar')
plt.xlabel('Product Line')
plt.ylabel('Total Sales')
plt.title('Total Sales by Product Line')
plt.xticks(rotation=45)
plt.show()

# Pie chart of customer territories
territory_counts = data['TERRITORY'].value_counts()
territory_counts.plot(kind='pie', autopct='%1.1f%%')
plt.title('Distribution of Customers by Territory')
plt.ylabel('')
plt.show()

"""Feature Engineering"""

# Example: Create a new feature 'TOTALPRICE' by multiplying 'QUANTITYORDERED' and 'PRICEEACH'
data['TOTALPRICE'] = data['QUANTITYORDERED'] * data['PRICEEACH']

print(data.head())

# Box plot for outlier detection
plt.boxplot(data['TOTALPRICE'])
plt.title('Box Plot for Outlier Detection (Total Price)')
plt.show()

# Group the data by product and sum up the sales
sales_by_product = data.groupby('PRODUCTCODE')['SALES'].sum()

# Find the product with maximum sales
max_sales_product = sales_by_product.idxmax()
max_sales_value = sales_by_product.max()

print(f"The product with the maximum sales is {max_sales_product} with total sales of ${max_sales_value:.2f}.")

import matplotlib.pyplot as plt

# Group the data by product and sum up the sales
sales_by_product = data.groupby('PRODUCTCODE')['SALES'].sum().sort_values(ascending=False)

# Plot total sales by product
plt.figure(figsize=(10, 6))
sales_by_product.plot(kind='bar', color='skyblue')
plt.title('Total Sales by Product')
plt.xlabel('Product')
plt.ylabel('Total Sales')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Group the data by product and sum up the sales
sales_by_product = data.groupby('PRODUCTCODE')['SALES'].sum().sort_values(ascending=False)

# Plot total sales by product
plt.figure(figsize=(10, 15))
sns.barplot(x=sales_by_product.values, y=sales_by_product.index, palette='Blues_r')
plt.title('Total Sales by Product')
plt.xlabel('Total Sales')
plt.ylabel('Product')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Group the data by product and sum up the quantity ordered
quantity_ordered_by_product = data.groupby('PRODUCTCODE')['QUANTITYORDERED'].sum().sort_values(ascending=False)

# Plot total quantity ordered by product
plt.figure(figsize=(10, 6))
quantity_ordered_by_product.plot(kind='bar', color='skyblue')
plt.title('Total Quantity Ordered by Product')
plt.xlabel('Product')
plt.ylabel('Total Quantity Ordered')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Group the data by product and sum up the quantity ordered
quantity_ordered_by_product = data.groupby('PRODUCTCODE')['QUANTITYORDERED'].sum().sort_values(ascending=False)

# Plot total quantity ordered by product
plt.figure(figsize=(10, 6))
plt.bar(quantity_ordered_by_product.index, quantity_ordered_by_product.values, color='skyblue')
plt.title('Total Quantity Ordered by Product')
plt.xlabel('Product')
plt.ylabel('Total Quantity Ordered')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Set the number of top products to display
top_n = 10

# Group the data by product and sum up the quantity ordered
quantity_ordered_by_product = data.groupby('PRODUCTCODE')['QUANTITYORDERED'].sum().sort_values(ascending=False)

# Select the top N products
top_products = quantity_ordered_by_product.head(top_n)

# Plot total quantity ordered by product
plt.figure(figsize=(10, 6))
plt.bar(top_products.index, top_products.values, color='skyblue')
plt.title(f'Top {top_n} Products by Total Quantity Ordered')
plt.xlabel('Product')
plt.ylabel('Total Quantity Ordered')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()